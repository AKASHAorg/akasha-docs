"use strict";(self.webpackChunkakasha_docs=self.webpackChunkakasha_docs||[]).push([[12874],{26278:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>a,contentTitle:()=>c,default:()=>h,frontMatter:()=>i,metadata:()=>r,toc:()=>d});var o=t(74848),s=t(28453);const i={sidebar_position:7,sidebar_label:"Content Blocks"},c="Content Blocks",r={id:"extensions/content_blocks",title:"Content Blocks",description:"The content beamed (posted) into the apps is composed of one or more blocks. For example, a beam can contain a rich text format block, an image block,",source:"@site/docs/extensions/content_blocks.md",sourceDirName:"extensions",slug:"/extensions/content_blocks",permalink:"/extensions/content_blocks",draft:!1,unlisted:!1,tags:[],version:"current",lastUpdatedAt:1719843115e3,sidebarPosition:7,frontMatter:{sidebar_position:7,sidebar_label:"Content Blocks"},sidebar:"defaultSidebar",previous:{title:"Extension Points",permalink:"/extensions/extension_points"},next:{title:"Editor",permalink:"/extensions/editor"}},a={},d=[{value:"Interface",id:"interface",level:2},{value:"Content Block Modes",id:"content-block-modes",level:2},{value:"editor-mode",id:"editor-mode",level:3},{value:"read-only-mode",id:"read-only-mode",level:3},{value:"Creating/Storing Content Block data",id:"creatingstoring-content-block-data",level:2},{value:"Content Nodes",id:"content-nodes",level:3},{value:"Displaying Content Block&#39;s data",id:"displaying-content-blocks-data",level:2}];function l(e){const n={a:"a",admonition:"admonition",code:"code",h1:"h1",h2:"h2",h3:"h3",p:"p",pre:"pre",strong:"strong",...(0,s.R)(),...e.components};return(0,o.jsxs)(o.Fragment,{children:[(0,o.jsx)(n.h1,{id:"content-blocks",children:"Content Blocks"}),"\n",(0,o.jsxs)(n.p,{children:["The content beamed (posted) into the apps is composed of one or more blocks. For example, a ",(0,o.jsx)(n.a,{href:"../glossary#beam",children:"beam"})," can contain a rich text format block, an image block,\na code block etc. All of these blocks can be ",(0,o.jsx)(n.code,{children:"injected"})," into the editor by different apps."]}),"\n",(0,o.jsxs)(n.p,{children:["To register a content-block an app should define an optional param in its ",(0,o.jsx)(n.a,{href:"https://github.com/AKASHAorg/akasha-core/blob/4f5934e4b3aef6b1920af1d196e372e5c75afe24/extensions/apps/antenna/src/index.tsx#L74",children:"register"})," function, called ",(0,o.jsx)(n.code,{children:"contentBlocks"}),"."]}),"\n",(0,o.jsx)(n.h2,{id:"interface",children:"Interface"}),"\n",(0,o.jsx)(n.p,{children:"Registering content-blocks will require the following properties:"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{children:"{\n   propertyType: 'text-block',\n   displayName: 'Text Block',\n   icon: <GlobeAltIcon />,\n   loadingFn: () => () => import('./content-blocks/sample-block'),\n}\n"})}),"\n",(0,o.jsxs)(n.p,{children:[(0,o.jsx)(n.strong,{children:(0,o.jsx)(n.a,{href:"/extensions/loading_function",children:"loadingFn"})})," -> - defines how the application is mounted/unmounted by importing the single-spa-react lifecycle methods."]}),"\n",(0,o.jsxs)(n.p,{children:[(0,o.jsx)(n.strong,{children:"propertyType"})," -> used to match the content published through this content."]}),"\n",(0,o.jsxs)(n.p,{children:[(0,o.jsx)(n.strong,{children:"displayName"})," -> used in the editor's menu to be able to select one when there are multiple content block types available"]}),"\n",(0,o.jsxs)(n.p,{children:[(0,o.jsx)(n.strong,{children:"icon"})," -> used also in the editor's menu"]}),"\n",(0,o.jsx)(n.admonition,{type:"tip",children:(0,o.jsxs)(n.p,{children:["A more advanced beam editor can be found ",(0,o.jsx)(n.a,{href:"https://github.com/AKASHAorg/akasha-core/blob/next/extensions/apps/antenna/src/extensions/beam-editor/beam-editor.tsx",children:"here"})]})}),"\n",(0,o.jsx)(n.h2,{id:"content-block-modes",children:"Content Block Modes"}),"\n",(0,o.jsxs)(n.p,{children:["A content block should handle 2 modes which is controlled through the ",(0,o.jsx)(n.code,{children:"props.blockInfo.mode"})," param passed to the root's react component:"]}),"\n",(0,o.jsx)(n.h3,{id:"editor-mode",children:"editor-mode"}),"\n",(0,o.jsxs)(n.p,{children:["This mode is displayed when the block is mounted inside the ",(0,o.jsx)(n.a,{href:"/extensions/editor",children:"editor"}),". All the logic for data input and validation is handled internally by the block."]}),"\n",(0,o.jsxs)(n.p,{children:["In edit mode the content block must expose a simple api using React's ",(0,o.jsx)(n.code,{children:"useImperativeHandle"})," to allow editor to use it for publishing. The ref is passed as prop so there is no need to use forwardRef."]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-ts",children:"React.useImperativeHandle(props.blockRef, () => ({\n  async createBlock() {},\n  async retryBlockCreation() {},\n}))\n"})}),"\n",(0,o.jsx)(n.h3,{id:"read-only-mode",children:"read-only-mode"}),"\n",(0,o.jsxs)(n.p,{children:["The content block in ",(0,o.jsx)(n.code,{children:"readonly"})," mode is used to render the saved data and provide the required interaction logic. For example, a voting block can contain the voting interaction logic in readonly mode and the question editing part in the\nedit-mode block."]}),"\n",(0,o.jsxs)(n.p,{children:["The content-block is matched against both the application's name and the ",(0,o.jsx)(n.code,{children:"propertyType"})," param when rendering the content."]}),"\n",(0,o.jsx)(n.h2,{id:"creatingstoring-content-block-data",children:"Creating/Storing Content Block data"}),"\n",(0,o.jsxs)(n.p,{children:["Creating the content block should only happen when the block is in ",(0,o.jsx)(n.a,{href:"https://github.com/AKASHAorg/akasha-core/blob/next/libs/typings/src/ui/editor-blocks.ts",children:"ContentBlockModes.EDIT"})," mode and it should be done through a call on ",(0,o.jsx)(n.code,{children:"CreateBlock"}),", available in the composeDB API."]}),"\n",(0,o.jsxs)(n.p,{children:["You can explore existing methods for your models using ",(0,o.jsx)(n.code,{children:"yarn composedb:graphql"}),"."]}),"\n",(0,o.jsxs)(n.p,{children:["Please check the ",(0,o.jsx)(n.a,{href:"https://developers.ceramic.network/docs/composedb/getting-started",children:"documentation"})," for ComposeDB."]}),"\n",(0,o.jsx)(n.p,{children:"The interface of a content-block model is:"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-tsx",children:"contentBlock = {\n    // controls the visiblity of this block\n    // true when visible\n    active: boolean,\n    // the version of the app that this\n    // block was published with\n    appVersionID: string,\n    // the content-nodes of this block, these are\n    // the actual values that were inserted by the user\n    content: [titleNode, bodyNode],\n    // the creation date of this content-block\n    createdAt: new Date().toISOString(),\n    // must be one of: 'FORM', 'OTHER' or 'TEXT'\n    kind: string,\n}\n"})}),"\n",(0,o.jsx)(n.h3,{id:"content-nodes",children:"Content Nodes"}),"\n",(0,o.jsxs)(n.p,{children:["A content block can contain one or more content-nodes which are stored in the content-blocks ",(0,o.jsx)(n.code,{children:"content"})," property. The properties of a content node are as follows:"]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-tsx",children:"const titleNode = {\n  /**\n   * this propertyType will be matched against the\n   * propertyType defined in the block's registration params\n   */\n  propertyType: string,\n  /**\n   * each content-node should have different label to be\n   * recognizable when rendering this content-node\n   */\n  label: string,\n  // the value of the content-node, added by the user,\n  value: string,\n}\n"})}),"\n",(0,o.jsx)(n.h2,{id:"displaying-content-blocks-data",children:"Displaying Content Block's data"}),"\n",(0,o.jsxs)(n.p,{children:["Displaying the data stored by a content block happens when the ",(0,o.jsx)(n.code,{children:"props.blockInfo.mode"})," param is set to ",(0,o.jsx)(n.a,{href:"https://github.com/AKASHAorg/akasha-core/blob/next/libs/typings/src/ui/editor-blocks.ts",children:"ContentBlockModes.READONLY"}),"."]}),"\n",(0,o.jsxs)(n.p,{children:["In ",(0,o.jsx)(n.code,{children:"readonly-mode"})," the component will receive the actual content-node that needs to be rendered through the React's ",(0,o.jsx)(n.code,{children:"props.content"})," parameter."]}),"\n",(0,o.jsx)(n.admonition,{type:"info",children:(0,o.jsxs)(n.p,{children:["The component will also receive the whole content-block's data as ",(0,o.jsx)(n.code,{children:"props.blockData"})," but the properties that need to be rendered are in the ",(0,o.jsx)(n.code,{children:"props.content"}),"."]})})]})}function h(e={}){const{wrapper:n}={...(0,s.R)(),...e.components};return n?(0,o.jsx)(n,{...e,children:(0,o.jsx)(l,{...e})}):l(e)}},28453:(e,n,t)=>{t.d(n,{R:()=>c,x:()=>r});var o=t(96540);const s={},i=o.createContext(s);function c(e){const n=o.useContext(i);return o.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function r(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:c(e.components),o.createElement(i.Provider,{value:n},e.children)}}}]);