"use strict";(self.webpackChunkakasha_docs=self.webpackChunkakasha_docs||[]).push([[7204],{87931:(e,t,n)=>{n.r(t),n.d(t,{Badge:()=>m,Bullet:()=>d,Details:()=>h,SpecifiedBy:()=>u,assets:()=>i,contentTitle:()=>r,default:()=>b,frontMatter:()=>c,metadata:()=>l,toc:()=>p});var a=n(74848),s=n(28453),o=n(96540);const c={id:"akasha-content-block-stream-count",title:"akashaContentBlockStreamCount"},r=void 0,l={id:"composedb-models/api/queries/akasha-content-block-stream-count",title:"akashaContentBlockStreamCount",description:"No description",source:"@site/docs/composedb-models/api/queries/akasha-content-block-stream-count.mdx",sourceDirName:"composedb-models/api/queries",slug:"/composedb-models/api/queries/akasha-content-block-stream-count",permalink:"/composedb-models/api/queries/akasha-content-block-stream-count",draft:!1,unlisted:!1,tags:[],version:"current",frontMatter:{id:"akasha-content-block-stream-count",title:"akashaContentBlockStreamCount"},sidebar:"defaultSidebar",previous:{title:"akashaContentBlockInterfaceIndex",permalink:"/composedb-models/api/queries/akasha-content-block-interface-index"},next:{title:"akashaContentBlockStreamIndex",permalink:"/composedb-models/api/queries/akasha-content-block-stream-index"}},i={},d=()=>{const e={span:"span",...(0,s.R)()};return(0,a.jsx)(a.Fragment,{children:(0,a.jsx)(e.span,{style:{fontWeight:"normal",fontSize:".5em",color:"var(--ifm-color-secondary-darkest)"},children:"\xa0\u25cf\xa0"})})},u=e=>{const t={a:"a",...(0,s.R)()};return(0,a.jsxs)(a.Fragment,{children:["Specification",(0,a.jsx)(t.a,{className:"link",style:{fontSize:"1.5em",paddingLeft:"4px"},target:"_blank",href:e.url,title:"Specified by "+e.url,children:"\u2398"})]})},m=e=>{const t={span:"span",...(0,s.R)()};return(0,a.jsx)(a.Fragment,{children:(0,a.jsx)(t.span,{className:e.class,children:e.text})})},h=({dataOpen:e,dataClose:t,children:n,startOpen:c=!1})=>{const r={details:"details",summary:"summary",...(0,s.R)()},[l,i]=(0,o.useState)(c);return(0,a.jsxs)(r.details,{...l?{open:!0}:{},className:"details",style:{border:"none",boxShadow:"none",background:"var(--ifm-background-color)"},children:[(0,a.jsx)(r.summary,{onClick:e=>{e.preventDefault(),i((e=>!e))},style:{listStyle:"none"},children:l?e:t}),l&&n]})},p=[{value:"Arguments",id:"arguments",level:3},{value:'<code>akashaContentBlockStreamCount.<b>filters</b></code><Bullet></Bullet><code>AkashaContentBlockStreamFiltersInput</code> <Badge class="badge badge--secondary"></Badge>',id:"akashacontentblockstreamcountfiltersakashacontentblockstreamfiltersinput-",level:4},{value:"Type",id:"type",level:3},{value:'<code>Int</code> <Badge class="badge badge--secondary"></Badge>',id:"int-",level:4}];function k(e){const t={a:"a",blockquote:"blockquote",code:"code",h3:"h3",h4:"h4",p:"p",pre:"pre",...(0,s.R)(),...e.components};return(0,a.jsxs)(a.Fragment,{children:[(0,a.jsx)(t.p,{children:"No description"}),"\n",(0,a.jsx)(t.pre,{children:(0,a.jsx)(t.code,{className:"language-graphql",children:"akashaContentBlockStreamCount(\n  filters: AkashaContentBlockStreamFiltersInput\n): Int!\n"})}),"\n",(0,a.jsx)(t.h3,{id:"arguments",children:"Arguments"}),"\n",(0,a.jsxs)(t.h4,{id:"akashacontentblockstreamcountfiltersakashacontentblockstreamfiltersinput-",children:[(0,a.jsx)(t.a,{href:"#",children:(0,a.jsxs)("code",{style:{fontWeight:"normal"},children:["akashaContentBlockStreamCount.",(0,a.jsx)("b",{children:"filters"})]})}),(0,a.jsx)(d,{}),(0,a.jsx)(t.a,{href:"/composedb-models/types/inputs/akasha-content-block-stream-filters-input",children:(0,a.jsx)(t.code,{children:"AkashaContentBlockStreamFiltersInput"})})," ",(0,a.jsx)(m,{class:"badge badge--secondary",text:"input"})]}),"\n",(0,a.jsx)(t.blockquote,{children:"\n"}),"\n",(0,a.jsx)(t.h3,{id:"type",children:"Type"}),"\n",(0,a.jsxs)(t.h4,{id:"int-",children:[(0,a.jsx)(t.a,{href:"/composedb-models/types/scalars/int",children:(0,a.jsx)(t.code,{children:"Int"})})," ",(0,a.jsx)(m,{class:"badge badge--secondary",text:"scalar"})]}),"\n",(0,a.jsxs)(t.blockquote,{children:["\n",(0,a.jsxs)(t.p,{children:["The ",(0,a.jsx)(t.code,{children:"Int"})," scalar type represents non-fractional signed whole numeric values. Int can represent values between -(2^31) and 2^31 - 1."]}),"\n"]})]})}function b(e={}){const{wrapper:t}={...(0,s.R)(),...e.components};return t?(0,a.jsx)(t,{...e,children:(0,a.jsx)(k,{...e})}):k(e)}},28453:(e,t,n)=>{n.d(t,{R:()=>c,x:()=>r});var a=n(96540);const s={},o=a.createContext(s);function c(e){const t=a.useContext(o);return a.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function r(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:c(e.components),a.createElement(o.Provider,{value:t},e.children)}}}]);